plugins {
    id 'java'
    id 'scala'
    id 'maven-publish'
    id "com.diffplug.gradle.spotless" version "${spotlessPluginVersion}"
    id "com.github.maiflai.scalatest" version "${scalaTestPluginVersion}"
}

ext {
    projectVersion = "0.1.0"
    scalaVersion = "2.12.8"
    scalaMinorVersion = computeScalaMinorVersion(scalaVersion)
    scalaMacroParadise = "2.1.1"
    pegdown = "1.4.2"
    scalaTest = "3.0.2"
    macroParadise = "2.1.1"
}

static def computeScalaMinorVersion(String scalaVersion) {
    String[] r = scalaVersion.split("\\.");
    return r.dropRight(1).join(".")
}

configurations {
    scalaCompilerPlugin
}

group 'com.cmhteixeira'
version "${projectVersion}"

sourceCompatibility = 1.8

publishing {
    publications {
        maven(MavenPublication) {
            groupId = "${project.group}"
            artifactId = "${project.name}_${scalaMinorVersion}"
            version = "${projectVersion}"

            from components.java
        }
    }
}

repositories {
    mavenCentral()
    jcenter()
}

spotless {
    scala {
        scalafmt("2.3.2").configFile(".scalafmt.conf")
    }

}

dependencies {
    compile("org.scala-lang:scala-library:$scalaVersion")

    compile("org.scala-lang:scala-compiler:$scalaVersion")
    scalaCompilerPlugin "org.scalamacros:paradise_$scalaVersion:$macroParadise"
    compile("org.scala-lang:scala-reflect:$scalaVersion")

    testCompile("org.scalatest:scalatest_$scalaMinorVersion:$scalaTest")
    testRuntime("org.pegdown:pegdown:$pegdown")
}

tasks.withType(ScalaCompile){
    // Map plugin jars to -Xplugin parameter
    List<String> parameters =
            configurations.scalaCompilerPlugin.files.collect {
                '-Xplugin:'+ it.absolutePath
            }

    // Add existing parameters
    List<String> existingParameters = scalaCompileOptions.additionalParameters
    if (existingParameters) {
        parameters.addAll(existingParameters)
    }

    // Add whatever flags you typically add
    parameters += [
            '-language:implicitConversions',
            '-language:higherKinds'
    ]

    // Finally set the additionalParameters
    scalaCompileOptions.additionalParameters = parameters
}